--- 
layout: post
title: "JOIN vs. EXISTS"
published: true
---
h1. {{ page.title }}

p(meta). 11 Nov 2011

Вчера разбирали тестовое задание соискателя, что повело за собой небольшой анализ sql-операторов.
Они, в общем говоря, не сравнимые EXISTS -- это фильтрующий оператор, (INNER) JOIN -- пересечение таблиц, но, тем не менее, подобный спор возникал уже пару раз, поэтому я решил написать тут пару замечаний на этот счет.

Допустим, у нас есть таблица Пользователей и таблица Постов. У одного пользователя может быть сколько угодно постов или не быть таковых вообще.
Требуется выбрать всех пользователей, у которых есть хотя бы один пост.
Дополнительное условие: будет замечательно, если выборка будет написана на чистом SQL + на ruby/rails.

Многие начинают решать эту задачу так: объединяют две таблицы Пользователей и Постов, а потом накладывают условие уникальности на полученный результат.

{% highlight sql %}
SELECT DISTINCT u.ID, u.NAME
FROM USERS u
JOIN POSTS p
ON u.ID = p.USER_ID
{% endhighlight %}

Мало того, что здесь непонятно по каким критериям мы выбираем пользователей, в запросе также существует оператор _DISTINCT_. DISTINCT призван вырезать дубликаты из результата работы выборки. Зачастую это очень дорогостоящая операция (стоимость которой растет при увеличивании выборки). К тому же, сам запрос построен нелогично, т.к. мы в основном запросе привлекаем таблицу Постов, которая никак не участвует в результирующей выборке.

Для подобного рода запросов в SQL предусмотрен фильтрующий оператор _EXISTS_. EXISTS работает по принципу "сокращенного" if в императивных языках программирования (Java, к примеру). В случае, если встретится true, оператор прекратит работу и вернет true. В таком случае, если у пользователя есть хотя бы один пост, пользователь сразу же попадет в выборку без остального прохода по таблице постов.
Таким образом, имеем следующий запрос:

{% highlight sql %}
SELECT u.ID, u.NAME
FROM USERS u
WHERE
  EXISTS (SELECT 1
          FROM POSTS p
          WHERE u.ID = p.USER_ID)
{% endhighlight %}

Последний запрос можно переписать средствами Ruby on Rails:

{% highlight ruby %}
users = User.all.select { |u| u.posts.present? }
{% endhighlight %}

h2. Замечание 1.
Описана ситуация, когда мы имеем связь вида 1:n. В случае, если мы выбираем данные из таблиц, связаных однозначно (1:1) разница между JOIN и EXISTS будет минимальна.

h2. Замечание 2.
Если в результате не требуется использовать данные из второй таблицы, не стоит применять JOIN.

