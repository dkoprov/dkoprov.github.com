
---
layout: post
title: rspec + spin (+ vim) = удобное тестирование
published: true
---
h1. {{ page.title }}

p(meta). 24 Apr 2012

h2. Чем плоха связка spork + guard

После того как на проекте количество тестов уверенно перевалило за 1000, я решил задуматься об оптимизации их прогона. Раньше мы использовали guard, но сейчас он скорее мешает, чем помогает. При каждом "случайном" сохранении теста запускается весь скоп тестов. Учитывая, что на проекте много интеграционных тестов, я постоянно получаю "всплывающие" окна firefox и ощутимое снижение производительности машины.

Казалось бы, выход есть – ставь @:focus => true@ и количество бегущих тестов сильно сократится, но это лишняя писанина, плюс я и коллеги часто забываем об этих метках, и, когда ты думаешь, что запустятся только "твои" помеченные тесты, параллельно с ними бежит еще 5-6... Можно еще в @.rspec@ файле написать @--fail-fast@, чтобы твой недописанный код/спек свалился и прекратил прогон. Немного облегчает жизнь. Немного. Все это – не решение. Лично для меня.

Коллега Андрей Огневский предложил еще одно решение проблемы прогона 1000 спеков после нужных тебе. В Guardfile добавить:

bc. :all_after_pass => false
:all_on_start => false

Допустим. Но... а зачем тогда guard вообще? Чтобы я не забыл нажать enter в консоли (или нажать пару кнопок прямо в редакторе, о чем ниже)? Только из-за автостарта ставить еще один гем – нет.

Еще одним неудобным моментом стало наличие spork на проекте. Всем хорош этот drb-сервер, но одно плохо: он иногда не завершается. Пока обнаружишь это, пройдет некоторое время, за которое ты перевернешь весь проект с мыслью: "Почему не применяются мои правки?!".
На всякий случай, если такой вопрос возник, сразу набирай @ps -ahx | grep ruby@ и ищи в результатах spork.

Есть радикальный способ: создать себе CI сервер и гонять спеки там. Но. Огромный минус. Я изменил спек/тестируемый код, я хочу _сразу_ посмотреть – работает или нет? CI такого предоставить не может: жди, пока все пробежит.

h2. spin? WAT?

"Spin":https://github.com/jstorimer/spin – разработка Jesse Storimer. Это такой же предзагрузчик rails-окружения, как и spork, но spin мне нравится больше. Суть spin заключается в двух коммандах: @spin serve@ и @spin push@. Первая загружает rails-окружение, вторая подбрасывает спеки в это окружение, где они и гонятся. Причем, чтобы прогнать только что завершившийся прогон спеков еще раз, надо нажать @Ctrl+\@. Чтобы прогнать вообще все спеки на проекте, пиши @spin push spec@. Всё! Просто и со вкусом.

В RSpec есть очень удобная вещь: можно гонять спек, отталкиваясь от строчки, на которой курсор. То есть, примеру, имеем такой спек-файл:

{% highlight ruby %}
describe Clazz do
  subject { clothes }

  context 'when it is rains' do
    it { should == [:raincoat, :umbrella] }
  end

  context 'when sun is shining' do
    it { should == [:t-shirt, :sunglasses] }
  end
end
{% endhighlight %}

Допустим, ты не хочешь гнать весь этот спек. Только тест в контексте, когда "солнце светит". Пиши @rspec <file_path>:10@. И прогонится только тест в контексте 10-й строки. Причем, эта фишка учитывает все вложенные контексты, описания и тд. Очень удобная вещь!

21 мая Jesse добавил немного моего кода в проект, и теперь, начиная с версии 0.4.6 удобный функционал rspec доступен и в spin!

h2. Причем тут vim?

Я делаю свою работу с его, vim'а,  помощью. В этом разделе я приведу пример совсем небольшого конфига, который позволит тебе гонять нужный тебе тест двумя нажатиями клавиш. На случай, если блок ниже тебе не видно, вот он на "github":https://github.com/dkoprov/vimconfig/blob/master/vimrc#L284-298

{% highlight vim %}
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Spin spec pusher
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! PushToSpin(args)
  let cmd = ":! spin push %" . a:args
  execute cmd
endfunction

" Mappings
" run one rspec example or describe block based on cursor position
map !p :call PushToSpin(":" . <C-r>=line('.')<CR>)

" run full rspec file
map !P :call PushToSpin("")
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" end of the spne spec pusher
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
{% endhighlight %}

Как это использовать? Хочешь, чтобы спек выполнился в контексте нахождения курсора? Жми @!p@. Весь файл надо отправить в spin – @!P@.
That's it.

h2. Okay. А если я считаю, что vim - %$#%!?

Науке неизвестно, есть ли что-то подобное для других редакторов. Но если нет, не думаю, что написать конфиг на подобие vim'овского займет более 20 минут.

Удач!
